// controllers/ploProgressController.js

const TieuChiDauRa = require('../models/tieuChiDauRa');
const MonHocTieuChi = require('../models/MonHocTieuChi');
const HienDienSV = require('../models/HienDienSV');
const DiemSinhVien = require('../models/DiemSinhVien');
const ChuongTrinh = require('../models/ChuongTrinh');
const cache = new Map();

// L∆∞u d·ªØ li·ªáu v√†o cache
function getCacheKey(maKhoi) {
  return `cache_${maKhoi}`;
}

function saveToCache(maKhoi, data) {
  const key = getCacheKey(maKhoi);
  const cacheData = {
    timestamp: Date.now(),
    data: data
  };
  cache.set(key, cacheData);
  console.log(`üíæ ƒê√£ l∆∞u cache cho m√£ kh·ªëi ${maKhoi}`);
}

function loadFromCache(maKhoi) {
  const key = getCacheKey(maKhoi);
  const cacheData = cache.get(key);
  
  if (cacheData) {
    const ageMinutes = (Date.now() - cacheData.timestamp) / (1000 * 60);
    console.log(`üìÅ T·∫£i cache cho m√£ kh·ªëi ${maKhoi} (${ageMinutes.toFixed(1)} ph√∫t tr∆∞·ªõc)`);
    return cacheData.data;
  }
  
  return null;
}

// H√†m ƒë·ªÉ chuy·ªÉn ƒë·ªïi s·ªë NamHK sang ƒë·ªãnh d·∫°ng d·ªÖ ƒë·ªçc
function formatNamHK(namHK) {
  const namHKStr = namHK.toString();
  const nam = namHKStr.substring(0, 4);
  const hocKy = namHKStr.charAt(4);
  return `nƒÉm ${nam} HK${hocKy}`;
}

// ‚úÖ H√†m chuy·ªÉn ƒë·ªïi HK3 th√†nh HK1 nƒÉm sau
function normalizeNamHK(namHK) {
  const namHKStr = namHK.toString();
  const nam = parseInt(namHKStr.substring(0, 4));
  const hocKy = parseInt(namHKStr.charAt(4));
  
  // N·∫øu l√† HK3, chuy·ªÉn th√†nh HK1 nƒÉm sau
  if (hocKy === 3) {
    return (nam + 1) * 10 + 1; // V√≠ d·ª•: 20203 -> 20211
  }
  
  return namHK;
}

async function getAllNamHKRange() {
  try {
    const allNamHK = await DiemSinhVien.distinct('NamHK');
    const sortedNamHK = allNamHK.map(nk => parseInt(nk)).sort((a, b) => a - b);
    return {
      min: sortedNamHK[0],
      max: sortedNamHK[sortedNamHK.length - 1]
    };
  } catch (error) {
    console.error('Error getting NamHK range:', error);
    return { min: 20221, max: 20241 }; // fallback
  }
}
// Th√™m function duplicate logic
function duplicateAndFillSemesters(ploData, namHKRange) {
  if (!ploData.semesters) {
    ploData.semesters = {};
  }
  // T·∫°o array t·∫•t c·∫£ c√°c semester c·∫ßn c√≥
  const allSemesters = [];
  for (let nam = Math.floor(namHKRange.min / 10); nam <= Math.floor(namHKRange.max / 10); nam++) {
    for (let hk = 1; hk <= 3; hk++) {
      const namHK = parseInt(`${nam}${hk}`);
      if (namHK >= namHKRange.min && namHK <= namHKRange.max) {
        allSemesters.push(namHK);
      }
    }
  }
  const sortedSemesters = allSemesters.sort((a, b) => a - b);
  const existingSemesters = Object.keys(ploData.semesters).map(s => parseInt(s)).sort((a, b) => a - b);
  // N·∫øu kh√¥ng c√≥ semester n√†o, return
  if (existingSemesters.length === 0) {
    return ploData;
  }
  // T·∫°o template t·ª´ semester ƒë·∫ßu ti√™n c√≥ d·ªØ li·ªáu
  const firstExistingSemester = existingSemesters[0];
  const template = JSON.parse(JSON.stringify(ploData.semesters[firstExistingSemester]));
  
  // Reset ƒëi·ªÉm v·ªÅ 0 cho template
  template.tongDiemSinhVien = 0;
  template.trangThaiDat = false;
  template.achievedPercent = 0;
  template.notAttemptedPercent = 100;
  template.achievedRatio = `0/${template.tongTrongSoLyThuyet || 0}`;
  if (template.monHocStatus) {
    Object.keys(template.monHocStatus).forEach(maMH => {
      template.monHocStatus[maMH].diem = null;
      template.monHocStatus[maMH].diemCoTrongSo = 0;
      template.monHocStatus[maMH].status = 'chua_hoc';
    });
  }
  // Fill t·∫•t c·∫£ c√°c semester
  for (const namHK of sortedSemesters) {
    if (!ploData.semesters[namHK]) {
      // T√¨m semester g·∫ßn nh·∫•t c√≥ d·ªØ li·ªáu tr∆∞·ªõc ƒë√≥
      let lastValidSemester = null;
      for (let i = existingSemesters.length - 1; i >= 0; i--) {
        if (existingSemesters[i] < namHK) {
          lastValidSemester = existingSemesters[i];
          break;
        }
      }
      if (lastValidSemester) {
        // Duplicate t·ª´ semester tr∆∞·ªõc
        ploData.semesters[namHK] = JSON.parse(JSON.stringify(ploData.semesters[lastValidSemester]));
      } else {
        // S·ª≠ d·ª•ng template r·ªóng
        ploData.semesters[namHK] = JSON.parse(JSON.stringify(template));
      }
    }
  }
  return ploData;
}

// H√†m t√≠nh ƒëi·ªÉm chu·∫©n c√≥ tr·ªçng s·ªë cho PLO
function tinhDiemChuanCoTrongSo(diemChon, tongTrongSoLyThuyet) {
  return diemChon * tongTrongSoLyThuyet;
}

// ‚úÖ H√†m l·∫•y ƒëi·ªÉm theo lo·∫°i ƒëi·ªÉm
function getDiemTheoLoaiDiem(diemSinhVien, loaiDiem) {
  let diem;
  switch(loaiDiem) {
    case 'QT': diem = diemSinhVien.QuaTrinh; break;
    case 'GK': diem = diemSinhVien.GiuaKy; break;
    case 'CK': diem = diemSinhVien.CuoiKy; break;
    default: diem = diemSinhVien.CuoiKy; break;
  }
  
  if (diem === null || diem === undefined || diem === '') {
    return null;
  }
  
  const diemSo = Number(diem);
  return isNaN(diemSo) ? null : diemSo;
}

exports.getPLOProgressForm = async (req, res) => {
  try {
    const namHKList = await DiemSinhVien.distinct('NamHK');
    namHKList.sort((a, b) => b - a);
    
    const formattedNamHKList = namHKList.map(namHK => ({
      value: namHK,
      formatted: formatNamHK(namHK)
    }));
    
    res.render('index', { 
      title: 'Theo d√µi ti·∫øn tr√¨nh PLO c·ªßa sinh vi√™n',
      ploProgressMode: true,
      namHKList: formattedNamHKList,
      maKhoiQuery: '',
      formatNamHK: formatNamHK,
      showSearchSection: false,
      sinhVienSearchMode: false,
      diemSinhVienSearchMode: false
    });
  } catch (error) {
    console.error('Error loading PLO progress form:', error);
    res.render('index', { 
      title: 'L·ªói',
      error: 'ƒê√£ x·∫£y ra l·ªói khi t·∫£i trang theo d√µi ti·∫øn tr√¨nh PLO.',
      ploProgressMode: true,
      formatNamHK: formatNamHK,
      showSearchSection: false
    });
  }
};


exports.searchPLOProgress = async (req, res) => {
  console.log('=== CHECK DATABASE ===');
const allChuongTrinh = await ChuongTrinh.find({});
// console.log('T·∫•t c·∫£ ch∆∞∆°ng tr√¨nh trong DB:', allChuongTrinh.map(ct => ({
//   MaKhoi: ct.MaKhoi,
//   DiemChon: ct.DiemChon
// })));
// console.log('======================');
  try {
    const { maKhoi, maSV } = req.body;
    
    if (!maKhoi) {
      return res.render('index', { 
        title: 'Theo d√µi ti·∫øn tr√¨nh PLO c·ªßa sinh vi√™n',
        ploProgressMode: true, 
        error: 'Vui l√≤ng nh·∫≠p m√£ kh·ªëi' 
      });
    }

    // L·∫•y range NamHK t·ª´ database
    const namHKRange = await getAllNamHKRange();
    //('NamHK Range:', namHKRange);

    // T√¨m sinh vi√™n trong m√£ kh·ªëi
    const sinhVienInKhoi = await HienDienSV.find({ MaKhoi: maKhoi });
    
    if (!sinhVienInKhoi || sinhVienInKhoi.length === 0) {
      return res.render('index', {
        title: 'Theo d√µi ti·∫øn tr√¨nh PLO c·ªßa sinh vi√™n',
        ploProgressMode: true,
        error: `Kh√¥ng t√¨m th·∫•y sinh vi√™n n√†o trong m√£ kh·ªëi ${maKhoi}`
      });
    }

    if (!maSV) {
      // Ch·ªâ hi·ªÉn th·ªã danh s√°ch sinh vi√™n
      return res.render('index', {
        title: 'Theo d√µi ti·∫øn tr√¨nh PLO c·ªßa sinh vi√™n',
        ploProgressMode: true,
        maKhoiQuery: maKhoi,
        sinhVienOptions: sinhVienInKhoi
      });
    }

    // Ki·ªÉm tra sinh vi√™n c√≥ trong kh·ªëi kh√¥ng
    const sinhVienInKhoiCheck = sinhVienInKhoi.find(sv => sv.MaSV === maSV);
    if (!sinhVienInKhoiCheck) {
      return res.render('index', {
        title: 'Theo d√µi ti·∫øn tr√¨nh PLO c·ªßa sinh vi√™n',
        ploProgressMode: true,
        maKhoiQuery: maKhoi,
        sinhVienOptions: sinhVienInKhoi,
        selectedMaSV: maSV,
        error: `Sinh vi√™n ${maSV} kh√¥ng thu·ªôc m√£ kh·ªëi ${maKhoi}`
      });
    }

    // L·∫•y th√¥ng tin ch∆∞∆°ng tr√¨nh v√† ƒëi·ªÉm chu·∫©n
    const chuongTrinh = await ChuongTrinh.findOne({ MaKhoi: maKhoi });
    if (!chuongTrinh) {
      return res.render('index', {
        title: 'Theo d√µi ti·∫øn tr√¨nh PLO c·ªßa sinh vi√™n',
        ploProgressMode: true,
        maKhoiQuery: maKhoi,
        sinhVienOptions: sinhVienInKhoi,
        selectedMaSV: maSV,
        error: `Kh√¥ng t√¨m th·∫•y ch∆∞∆°ng tr√¨nh cho m√£ kh·ªëi ${maKhoi}`
      });
    }

    const diemChon = chuongTrinh.DiemChon;
// console.log('=== DEBUG DIEM CHON ===');
// console.log('MaKhoi t√¨m ki·∫øm:', maKhoi);
// console.log('ChuongTrinh t√¨m ƒë∆∞·ª£c:', chuongTrinh);
// console.log('chuongTrinh.DiemChon:', chuongTrinh.DiemChon);
// console.log('diemChon value:', diemChon);
// console.log('diemChon type:', typeof diemChon);
// console.log('=======================');

    // L·∫•y danh s√°ch PLO v√† ti√™u ch√≠
    const tieuChiList = await TieuChiDauRa.find({ MaKhoi: maKhoi });
    const ploGroups = {};
    
    tieuChiList.forEach(tc => {
      if (!ploGroups[tc.MaPLO]) {
        ploGroups[tc.MaPLO] = [];
      }
      ploGroups[tc.MaPLO].push(tc.MaTieuChi);
    });

    //console.log('PLO Groups found:', Object.keys(ploGroups));

    // L·∫•y th√¥ng tin m√¥n h·ªçc v√† ti√™u ch√≠
    const monHocTieuChiList = await MonHocTieuChi.find({
      MaTieuChi: { $in: tieuChiList.map(tc => tc.MaTieuChi) }
    });

    //console.log(`Found ${monHocTieuChiList.length} m√¥n h·ªçc ti√™u ch√≠`);

    // L·∫•y ƒëi·ªÉm sinh vi√™n
    const diemSinhVienList = await DiemSinhVien.find({ MaSV: maSV });
    //console.log(`Found ${diemSinhVienList.length} ƒëi·ªÉm records for ${maSV}`);

    // Check cache
    let cacheStatus = 'No cache';
    const cacheKey = `plo_progress_${maSV}_${maKhoi}`;

    // T·∫°o object sinh vi√™n v·ªõi th√¥ng tin c∆° b·∫£n
    const sinhVien = {
      MaSV: maSV,
      info: sinhVienInKhoiCheck,
      plos: {}
    };

    // T√≠nh to√°n cho t·ª´ng PLO
    for (const [plo, tieuChiIds] of Object.entries(ploGroups)) {
      //console.log(`\n=== Processing PLO ${plo} ===`);
      
      // L·∫•y m√¥n h·ªçc li√™n quan ƒë·∫øn PLO n√†y
      const relatedMonHoc = monHocTieuChiList.filter(mh => 
        tieuChiIds.includes(mh.MaTieuChi)
      );

      //console.log(`Found ${relatedMonHoc.length} related subjects for PLO ${plo}`);

      // T√≠nh to√°n t·ªïng tr·ªçng s·ªë l√Ω thuy·∫øt
      const tongTrongSoLyThuyet = relatedMonHoc.reduce((sum, mh) => sum + mh.TrongSo, 0);
      
      // Kh·ªüi t·∫°o d·ªØ li·ªáu PLO
      sinhVien.plos[plo] = {
        tongTrongSoLyThuyet: tongTrongSoLyThuyet,
        tongTrongSoSinhVienCo: 0,
        tongDiemSinhVien: 0,
        diemChuanCoTrongSo: 0, // S·∫Ω t√≠nh l·∫°i sau khi c√≥ tongTrongSoSinhVienCo
        //diemChuanCoTrongSo: diemChon * tongTrongSoLyThuyet,
        trangThaiDat: false,
        semesters: {},
        chiTietMonHoc: {}
      };

      // X·ª≠ l√Ω t·ª´ng m√¥n h·ªçc
      for (const monHoc of relatedMonHoc) {
        const maMH = monHoc.MaMH;
        const trongSo = monHoc.TrongSo;
        const loaiDiem = monHoc.LoaiDiem;

        // T√¨m ƒëi·ªÉm c·ªßa sinh vi√™n cho m√¥n n√†y
        const diemRecords = diemSinhVienList.filter(d => d.MaMH === maMH);
        
        let bestDiem = null;
        let bestNamHK = null;

        // Ch·ªçn ƒëi·ªÉm cao nh·∫•t n·∫øu c√≥ nhi·ªÅu l·∫ßn h·ªçc
        for (const diemRecord of diemRecords) {
          let currentDiem = null;
          
          switch (loaiDiem) {
            case 'QT':
              currentDiem = diemRecord.QuaTrinh;
              break;
            case 'GK':
              currentDiem = diemRecord.GiuaKy;
              break;
            case 'CK':
              currentDiem = diemRecord.CuoiKy;
              break;
            default:
              console.warn(`Unknown LoaiDiem: ${loaiDiem} for ${maMH}`);
              continue;
          }

          if (currentDiem !== null && currentDiem !== undefined && !isNaN(currentDiem)) {
            if (bestDiem === null || currentDiem > bestDiem) {
              bestDiem = currentDiem;
              bestNamHK = diemRecord.NamHK;
            }
          }
        }

        // T√≠nh ƒëi·ªÉm c√≥ tr·ªçng s·ªë
        const diemCoTrongSo = bestDiem !== null ? bestDiem * trongSo : 0;
        const status = bestDiem !== null ? 'co_diem' : 'chua_hoc';

        // C·∫≠p nh·∫≠t t·ªïng ƒëi·ªÉm PLO
        if (bestDiem !== null) {
          sinhVien.plos[plo].tongTrongSoSinhVienCo += trongSo;
          sinhVien.plos[plo].tongDiemSinhVien += diemCoTrongSo;
        }

        // L∆∞u chi ti·∫øt m√¥n h·ªçc
        sinhVien.plos[plo].chiTietMonHoc[maMH] = {
          diem: bestDiem,
          trongSo: trongSo,
          diemCoTrongSo: diemCoTrongSo,
          loaiDiem: loaiDiem,
          namHK: bestNamHK,
          status: status
        };

        // L∆∞u v√†o semester n·∫øu c√≥ ƒëi·ªÉm
        if (bestNamHK && bestDiem !== null) {
          if (!sinhVien.plos[plo].semesters[bestNamHK]) {
            sinhVien.plos[plo].semesters[bestNamHK] = {
              tongTrongSoLyThuyet: 0,
              tongTrongSoSinhVienCo: 0,
              tongDiemSinhVien: 0,
              diemChuanCoTrongSo: 0,
              trangThaiDat: false,
              achievedPercent: 0,
              notAttemptedPercent: 100,
              achievedRatio: '0/0',
              monHocStatus: {},
              originalData: true // ƒê√°nh d·∫•u d·ªØ li·ªáu g·ªëc
            };
          }

          const semester = sinhVien.plos[plo].semesters[bestNamHK];
          semester.tongTrongSoLyThuyet += trongSo;
          semester.tongTrongSoSinhVienCo += trongSo;
          semester.tongDiemSinhVien += diemCoTrongSo;
          semester.diemChuanCoTrongSo = diemChon * semester.tongTrongSoLyThuyet;
          semester.monHocStatus[maMH] = {
            diem: bestDiem,
            trongSo: trongSo,
            diemCoTrongSo: diemCoTrongSo,
            loaiDiem: loaiDiem,
            status: status
          };
        }
      }

      // T√≠nh tr·∫°ng th√°i ƒë·∫°t PLO
      sinhVien.plos[plo].trangThaiDat = sinhVien.plos[plo].tongDiemSinhVien >= sinhVien.plos[plo].diemChuanCoTrongSo;

      // T√≠nh to√°n cho c√°c semester
      for (const [namHK, semester] of Object.entries(sinhVien.plos[plo].semesters)) {
        const achievedPercent = semester.tongTrongSoLyThuyet > 0 ? 
          (semester.tongTrongSoSinhVienCo / semester.tongTrongSoLyThuyet) * 100 : 0;
        
        semester.achievedPercent = achievedPercent;
        semester.notAttemptedPercent = 100 - achievedPercent;
        semester.achievedRatio = `${semester.tongTrongSoSinhVienCo}/${semester.tongTrongSoLyThuyet}`;
        semester.trangThaiDat = semester.tongDiemSinhVien >= semester.diemChuanCoTrongSo;
        // T√≠nh l·∫°i ƒëi·ªÉm chu·∫©n d·ª±a tr√™n tr·ªçng s·ªë th·ª±c t·∫ø
        sinhVien.plos[plo].diemChuanCoTrongSo = diemChon * sinhVien.plos[plo].tongTrongSoSinhVienCo;
        sinhVien.plos[plo].trangThaiDat = sinhVien.plos[plo].tongDiemSinhVien >= sinhVien.plos[plo].diemChuanCoTrongSo;
      
      // console.log(`\nPLO ${plo} Final Result:`);
      // console.log(`- ƒêi·ªÉm sinh vi√™n: ${sinhVien.plos[plo].tongDiemSinhVien.toFixed(2)}`);
      // console.log(`- ƒêi·ªÉm chu·∫©n c·∫ßn ƒë·∫°t: ${sinhVien.plos[plo].diemChuanCoTrongSo.toFixed(2)}`);
      // console.log(`- K·∫øt qu·∫£: ${sinhVien.plos[plo].trangThaiDat ? 'ƒê·∫†T' : 'CH∆ØA ƒê·∫†T'}`);
      }

      // üî• √ÅP D·ª§NG LOGIC DUPLICATE
      sinhVien.plos[plo] = duplicateAndFillSemesters(sinhVien.plos[plo], namHKRange);
    }

    //console.log(`\n=== Final Results for ${maSV} ===`);
    //console.log('PLOs processed:', Object.keys(sinhVien.plos));

    // Render k·∫øt qu·∫£
    res.render('index', {
      title: 'Theo d√µi ti·∫øn tr√¨nh PLO c·ªßa sinh vi√™n',
      ploProgressMode: true,
      maKhoiQuery: maKhoi,
      sinhVienOptions: sinhVienInKhoi,
      selectedMaSV: maSV,
      ploProgressResults: {
        sinhVien: sinhVien,
        diemChon: diemChon,
        ploGroups: ploGroups
      },
      cacheStatus: cacheStatus
    });

  } catch (error) {
    console.error('PLO progress search error:', error);
    res.render('index', {
      title: 'Theo d√µi ti·∫øn tr√¨nh PLO c·ªßa sinh vi√™n',
      ploProgressMode: true,
      error: 'C√≥ l·ªói x·∫£y ra khi t√¨m ki·∫øm: ' + error.message
    });
  }
};

// Th√™m 2 helper functions n√†y v√†o ƒë·∫ßu file ho·∫∑c cu·ªëi file
async function getAllNamHKRange() {
  try {
    const allNamHK = await DiemSinhVien.distinct('NamHK');
    const sortedNamHK = allNamHK
      .map(nk => parseInt(nk))
      .filter(nk => !isNaN(nk))
      .sort((a, b) => a - b);
    
    return {
      min: sortedNamHK[0] || 20221,
      max: sortedNamHK[sortedNamHK.length - 1] || 20241
    };
  } catch (error) {
    console.error('Error getting NamHK range:', error);
    return { min: 20221, max: 20241 }; // fallback
  }
}

function duplicateAndFillSemesters(ploData, namHKRange) {
  if (!ploData.semesters) {
    ploData.semesters = {};
  }

  // T·∫°o array t·∫•t c·∫£ c√°c semester c·∫ßn c√≥
  const allSemesters = [];
  const startYear = Math.floor(namHKRange.min / 10);
  const endYear = Math.floor(namHKRange.max / 10);
  
  for (let nam = startYear; nam <= endYear; nam++) {
    for (let hk = 1; hk <= 3; hk++) {
      const namHK = parseInt(`${nam}${hk}`);
      if (namHK >= namHKRange.min && namHK <= namHKRange.max) {
        allSemesters.push(namHK);
      }
    }
  }

  const sortedSemesters = allSemesters.sort((a, b) => a - b);
  const existingSemesters = Object.keys(ploData.semesters)
    .map(s => parseInt(s))
    .filter(s => !isNaN(s))
    .sort((a, b) => a - b);

  //console.log('All semesters needed:', sortedSemesters);
  //console.log('Existing semesters:', existingSemesters);

  // N·∫øu kh√¥ng c√≥ semester n√†o, return
  if (existingSemesters.length === 0) {
    return ploData;
  }

  // Fill missing semesters
  for (const namHK of sortedSemesters) {
    if (!ploData.semesters[namHK]) {
      // T√¨m semester g·∫ßn nh·∫•t c√≥ d·ªØ li·ªáu tr∆∞·ªõc ƒë√≥
      let sourceSemester = null;
      for (let i = existingSemesters.length - 1; i >= 0; i--) {
        if (existingSemesters[i] < namHK) {
          sourceSemester = existingSemesters[i];
          break;
        }
      }

      if (sourceSemester) {
        // Duplicate t·ª´ semester tr∆∞·ªõc
        //console.log(`Duplicating ${sourceSemester} -> ${namHK}`);
        ploData.semesters[namHK] = JSON.parse(JSON.stringify(ploData.semesters[sourceSemester]));
        ploData.semesters[namHK].originalData = false; // ƒê√°nh d·∫•u l√† d·ªØ li·ªáu nh√¢n b·∫£n
      } else {
        // T√¨m semester ƒë·∫ßu ti√™n ƒë·ªÉ forward fill
        const firstSemester = existingSemesters[0];
        if (firstSemester > namHK) {
          //console.log(`Forward filling ${firstSemester} -> ${namHK}`);
          ploData.semesters[namHK] = JSON.parse(JSON.stringify(ploData.semesters[firstSemester]));
          ploData.semesters[namHK].originalData = false; // ƒê√°nh d·∫•u l√† d·ªØ li·ªáu nh√¢n b·∫£n
        }
      }
    }
  }

  return ploData;
}

async function trackStudentPLOProgressWithCache(maKhoi, maSV) {
  const startTime = Date.now();
  
  try {
    const cachedData = loadFromCache(maKhoi);
    
    if (cachedData && cachedData.students && cachedData.students[maSV]) {
      const endTime = Date.now();
      //console.log(`‚ö° L·∫•y t·ª´ cache: ${endTime - startTime}ms`);
      
      return {
        success: true,
        data: {
          sinhVien: cachedData.students[maSV],
          ploGroups: cachedData.ploGroups,
          namHKList: cachedData.namHKList
        },
        usedCache: true,
        processingTime: endTime - startTime
      };
    }
    
    //console.log(`üîÑ T√≠nh to√°n m·ªõi cho kh·ªëi ${maKhoi}`);
    
    const allStudents = await HienDienSV.find({ MaKhoi: maKhoi }).lean();
    const cacheData = {
      students: {},
      ploGroups: null,
      namHKList: null
    };
    
    const requestedResult = await trackStudentPLOProgress(maKhoi, maSV);
    
    if (!requestedResult.success) {
      return requestedResult;
    }
    
    cacheData.students[maSV] = requestedResult.data.sinhVien;
    cacheData.ploGroups = requestedResult.data.ploGroups;
    cacheData.namHKList = requestedResult.data.namHKList;
    
    setImmediate(async () => {
      console.log(`üì¶ T√≠nh to√°n cache cho ${allStudents.length} sinh vi√™n...`);
      
      for (const student of allStudents) {
        if (student.MaSV !== maSV) {
          try {
            const result = await trackStudentPLOProgress(maKhoi, student.MaSV);
            if (result.success) {
              cacheData.students[student.MaSV] = result.data.sinhVien;
            }
          } catch (error) {
            console.log(`‚ùå L·ªói khi cache SV ${student.MaSV}: ${error.message}`);
          }
        }
      }
      
      saveToCache(maKhoi, cacheData);
      //console.log(`‚úÖ ƒê√£ cache xong ${Object.keys(cacheData.students).length} sinh vi√™n`);
    });
    
    const endTime = Date.now();
    console.log(`‚úÖ Ho√†n th√†nh: ${endTime - startTime}ms`);
    
    return {
      success: true,
      data: requestedResult.data,
      usedCache: false,
      processingTime: endTime - startTime
    };
    
  } catch (error) {
    console.error('‚ùå L·ªói:', error);
    return {
      success: false,
      error: `ƒê√£ x·∫£y ra l·ªói: ${error.message}`,
      usedCache: false
    };
  }
}

/**
 * ‚úÖ Function ch√≠nh ƒë∆∞·ª£c vi·∫øt l·∫°i theo y√™u c·∫ßu m·ªõi - l∆∞u theo t·ª´ng nƒÉm
 */
async function trackStudentPLOProgress(maKhoi, maSV) {
  try {
    // Ki·ªÉm tra sinh vi√™n c√≥ thu·ªôc kh·ªëi hay kh√¥ng
    const sinhVien = await HienDienSV.findOne({ MaKhoi: maKhoi, MaSV: maSV }).lean();
    
    if (!sinhVien) {
      return {
        success: false,
        error: `Sinh vi√™n c√≥ m√£ ${maSV} kh√¥ng thu·ªôc m√£ kh·ªëi "${maKhoi}".`
      };
    }
    
    // B∆Ø·ªöC 1: L·∫•y DiemChon t·ª´ ChuongTrinh
    const chuongTrinh = await ChuongTrinh.findOne({ MaKhoi: maKhoi }).lean();
    
    if (!chuongTrinh) {
      return {
        success: false,
        error: `Kh√¥ng t√¨m th·∫•y ch∆∞∆°ng tr√¨nh cho m√£ kh·ªëi "${maKhoi}".`
      };
    }
    
    const diemChon = chuongTrinh.DiemChon;
console.log('=== DEBUG DIEM CHON ===');
console.log('ChuongTrinh object:', JSON.stringify(chuongTrinh, null, 2));
console.log('DiemChon value:', diemChon);
console.log('DiemChon type:', typeof diemChon);
console.log('=======================');
    
    // B∆Ø·ªöC 2: L·∫•y PLO v√† ti√™u ch√≠ t·ª´ TieuChiDauRa
    const tieuChiResults = await TieuChiDauRa.find({ MaKhoi: maKhoi }).lean();
    
    if (!tieuChiResults || tieuChiResults.length === 0) {
      return {
        success: false,
        error: `Kh√¥ng t√¨m th·∫•y ti√™u ch√≠ n√†o cho m√£ kh·ªëi "${maKhoi}".`
      };
    }
    
    // Nh√≥m ti√™u ch√≠ theo PLO
    const ploGroups = {};
    tieuChiResults.forEach(tc => {
      const plo = tc.MaPLO;
      if (!ploGroups[plo]) {
        ploGroups[plo] = {
          maPLO: plo,
          nhomPLO: tc.NhomPLO || 'Kh√¥ng x√°c ƒë·ªãnh',
          tieuChiList: []
        };
      }
      ploGroups[plo].tieuChiList.push(tc.MaTieuChi);
    });
    
    // B∆Ø·ªöC 3: L·∫•y m√¥n h·ªçc, lo·∫°i ƒëi·ªÉm, tr·ªçng s·ªë t·ª´ MonHocTieuChi
    const maTieuChiList = tieuChiResults.map(tc => tc.MaTieuChi);
    const monHocTieuChiResults = await MonHocTieuChi.find({
      MaTieuChi: { $in: maTieuChiList }
    }).lean();
    
    if (!monHocTieuChiResults || monHocTieuChiResults.length === 0) {
      return {
        success: false,
        error: `Kh√¥ng t√¨m th·∫•y m√¥n h·ªçc n√†o cho c√°c ti√™u ch√≠ c·ªßa m√£ kh·ªëi "${maKhoi}".`
      };
    }
    
    // T·∫°o mapping t·ª´ ti√™u ch√≠ sang PLO
    const tieuChiToPLOMap = {};
    tieuChiResults.forEach(tc => {
      tieuChiToPLOMap[tc.MaTieuChi] = tc.MaPLO;
    });
    
    // Nh√≥m m√¥n h·ªçc theo PLO v·ªõi th√¥ng tin LoaiDiem v√† TrongSo
    const ploMonHocMap = {};
    monHocTieuChiResults.forEach(mh => {
      const plo = tieuChiToPLOMap[mh.MaTieuChi];
      
      if (!ploMonHocMap[plo]) {
        ploMonHocMap[plo] = {};
      }
      
      if (!ploMonHocMap[plo][mh.MaMH]) {
        ploMonHocMap[plo][mh.MaMH] = {
          maMH: mh.MaMH,
          loaiDiem: mh.LoaiDiem,
          trongSo: mh.TrongSo
        };
      }
    });
    
    // ‚úÖ B∆Ø·ªöC 4: L·∫•y v√† x·ª≠ l√Ω ƒëi·ªÉm sinh vi√™n (normalize HK3 v√† ch·ªçn ƒëi·ªÉm cao h∆°n)
    const diemSinhVienResults = await DiemSinhVien.find({ MaSV: maSV }).lean();
    
    // Nh√≥m ƒëi·ªÉm theo MaMH v√† x·ª≠ l√Ω HK3
    const diemMap = {};
    diemSinhVienResults.forEach(diem => {
      const normalizedNamHK = normalizeNamHK(diem.NamHK);
      const key = `${diem.MaMH}_${normalizedNamHK}`;
      
      if (!diemMap[diem.MaMH]) {
        diemMap[diem.MaMH] = {};
      }
      
      // N·∫øu ƒë√£ c√≥ ƒëi·ªÉm cho nƒÉm n√†y, ch·ªçn ƒëi·ªÉm cao h∆°n
      if (diemMap[diem.MaMH][normalizedNamHK]) {
        const existing = diemMap[diem.MaMH][normalizedNamHK];
        const existingDiem = Math.max(
          getDiemTheoLoaiDiem(existing, existing.LoaiDiem) || 0,
          getDiemTheoLoaiDiem(diem, diem.LoaiDiem) || 0
        );
        const newDiem = Math.max(
          getDiemTheoLoaiDiem(existing, diem.LoaiDiem) || 0,
          getDiemTheoLoaiDiem(diem, existing.LoaiDiem) || 0
        );
        
        // Ch·ªçn record c√≥ ƒëi·ªÉm cao h∆°n
        if (newDiem > existingDiem) {
          diemMap[diem.MaMH][normalizedNamHK] = diem;
        }
      } else {
        diemMap[diem.MaMH][normalizedNamHK] = diem;
      }
    });
    
    // ‚úÖ B∆Ø·ªöC 5: T√≠nh to√°n ti·∫øn tr√¨nh theo t·ª´ng nƒÉm cho t·ª´ng PLO
    const ploResults = {};
    const allNamHKSet = new Set();
    
    // L·∫•y t·∫•t c·∫£ c√°c nƒÉm h·ªçc k·ª≥ c√≥ ƒëi·ªÉm
    Object.values(diemMap).forEach(yearlyData => {
      Object.keys(yearlyData).forEach(namHK => {
        allNamHKSet.add(parseInt(namHK));
      });
    });
    
    const sortedNamHKList = Array.from(allNamHKSet).sort((a, b) => a - b);
    
    for (const [plo, monHocInfo] of Object.entries(ploMonHocMap)) {
      // T√≠nh t·ªïng tr·ªçng s·ªë l√Ω thuy·∫øt cho PLO n√†y
      let tongTrongSoLyThuyet = 0;
      for (const info of Object.values(monHocInfo)) {
        tongTrongSoLyThuyet += info.trongSo;
      }
      
      const semesterProgress = {};
      let cumulativeDiem = 0;
      let cumulativeTrongSo = 0;
      const cumulativeMonHoc = {};
      
      // ‚úÖ T√≠nh ti·∫øn tr√¨nh t√≠ch l≈©y cho t·ª´ng nƒÉm
      for (const namHK of sortedNamHKList) {
        // Th√™m ƒëi·ªÉm m·ªõi c·ªßa nƒÉm n√†y
        for (const [maMH, info] of Object.entries(monHocInfo)) {
          if (diemMap[maMH] && diemMap[maMH][namHK]) {
            const diemSV = diemMap[maMH][namHK];
            const diem = getDiemTheoLoaiDiem(diemSV, info.loaiDiem);
            
            if (diem !== null && !isNaN(diem)) {
              // N·∫øu ƒë√£ c√≥ ƒëi·ªÉm cho m√¥n n√†y r·ªìi, thay th·∫ø b·∫±ng ƒëi·ªÉm m·ªõi
              if (cumulativeMonHoc[maMH]) {
                cumulativeDiem -= cumulativeMonHoc[maMH].diemCoTrongSo;
                cumulativeTrongSo -= cumulativeMonHoc[maMH].trongSo;
              }
              
              const diemCoTrongSo = diem * info.trongSo;
              cumulativeDiem += diemCoTrongSo;
              cumulativeTrongSo += info.trongSo;
              
              cumulativeMonHoc[maMH] = {
                diem: diem,
                loaiDiem: info.loaiDiem,
                trongSo: info.trongSo,
                diemCoTrongSo: diemCoTrongSo,
                namHK: namHK,
                status: 'co_diem'
              };
            }
          }
        }
        
        // T√≠nh to√°n cho nƒÉm n√†y
        const diemChuanCoTrongSo = tinhDiemChuanCoTrongSo(diemChon, tongTrongSoLyThuyet);
        const trangThaiDat = sinhVien.plos[plo].tongDiemSinhVien >= diemChuanCoTrongSo;

        const trongSoChuaCo = (tongTrongSoLyThuyet - cumulativeTrongSo) / tongTrongSoLyThuyet;
        
        // T·∫°o th√¥ng tin m√¥n h·ªçc cho nƒÉm n√†y
        const monHocStatus = {};
        for (const [maMH, info] of Object.entries(monHocInfo)) {
          if (cumulativeMonHoc[maMH]) {
            monHocStatus[maMH] = cumulativeMonHoc[maMH];
          } else {
            monHocStatus[maMH] = {
              diem: null,
              loaiDiem: info.loaiDiem,
              trongSo: info.trongSo,
              diemCoTrongSo: 0,
              namHK: null,
              status: 'chua_hoc'
            };
          }
        }
        
        semesterProgress[namHK] = {
          namHK: namHK,
          tongDiemSinhVien: cumulativeDiem,
          diemChuanCoTrongSo: diemChuanCoTrongSo,
          tongTrongSoSinhVienCo: cumulativeTrongSo,
          trangThaiDat: trangThaiDat,
          trongSoChuaCo: trongSoChuaCo,
          achievedPercent: cumulativeTrongSo > 0 ? (cumulativeTrongSo / tongTrongSoLyThuyet) * 100 : 0,
          notAttemptedPercent: (trongSoChuaCo * 100),
          achievedRatio: `${cumulativeTrongSo.toFixed(1)}/${tongTrongSoLyThuyet.toFixed(1)}`,
          monHocStatus: monHocStatus,
          allAchieved: trangThaiDat && trongSoChuaCo === 0
        };
      }
      
      // L·∫•y k·∫øt qu·∫£ cu·ªëi c√πng (nƒÉm cao nh·∫•t)
      const latestNamHK = Math.max(...sortedNamHKList);
      const finalResult = semesterProgress[latestNamHK] || {
        tongDiemSinhVien: 0,
        diemChuanCoTrongSo: 0,
        tongTrongSoSinhVienCo: 0,
        trangThaiDat: false,
        trongSoChuaCo: 1
      };
      
      ploResults[plo] = {
        maPLO: plo,
        monHocList: Object.keys(monHocInfo),
        tongDiemSinhVien: finalResult.tongDiemSinhVien,
        diemChuanCoTrongSo: finalResult.diemChuanCoTrongSo,
        tongTrongSoSinhVienCo: finalResult.tongTrongSoSinhVienCo,
        tongTrongSoLyThuyet: tongTrongSoLyThuyet,
        trangThaiDat: finalResult.trangThaiDat,
        trongSoChuaCo: finalResult.trongSoChuaCo,
        chiTietMonHoc: finalResult.monHocStatus,
        semesters: semesterProgress // ‚úÖ L∆∞u ti·∫øn tr√¨nh t·ª´ng nƒÉm
      };
    }
    
    // T·∫°o danh s√°ch nƒÉm h·ªçc k·ª≥ formatted
    const namHKList = sortedNamHKList.map(namHK => ({
      value: namHK,
      formatted: formatNamHK(namHK)
    }));
    
    const result = {
      sinhVien: {
        MaSV: maSV,
        info: sinhVien,
        plos: ploResults
      },
      ploGroups: ploGroups,
      namHKList: namHKList,
      diemChon: diemChon
    };
    
    return {
      success: true,
      data: result
    };
    
  } catch (error) {
    console.error('‚ùå L·ªói trackStudentPLOProgress:', error);
    return {
      success: false,
      error: `ƒê√£ x·∫£y ra l·ªói: ${error.message}`
    };
  }
}


// Export for reuse in other controllers
module.exports = {
  // Main exports
  searchPLOProgress: exports.searchPLOProgress,
  getPLOProgressForm: exports.getPLOProgressForm,
  
  // Helper functions
  formatNamHK,
  normalizeNamHK,
  getAllNamHKRange,
  duplicateAndFillSemesters,
  tinhDiemChuanCoTrongSo,
  getDiemTheoLoaiDiem,
  
  // Cache functions
  saveToCache,
  loadFromCache,
  getCacheKey
};